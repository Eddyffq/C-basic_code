寄存器版
板上两个LED灯接在PA2,PA3引脚。
如何设置PA2,PA3引脚呢？
1.打开接口时钟开关
2.将PA2,PA3引脚设置为通用输入输出引脚，引脚输出低电平发光，引脚输出高电平熄灭
3.由于高低电平都能输出，应该是推免模式
4.端口无需上下拉
5.设置引脚高低电平时，只向端口输出寄存器写入1\0数据即可。

跑马灯程序
1.打开GPIOA的时钟                RCC->AHBENR|=0x00020000;

2.配置PA2,PA3接口
通用输出                         GPIOA->MODER|=0x00000050;
推挽                            GPIOA->OTYPER|=0x00000000;
50Mhz                           GPIOA->OSPEEDR|=0x000000F0;
无上拉也无下拉                     GPIOA->PUPDR|=0x00000000;

3.点亮LED1                      GPIOA->ODR &=~(1<<2); 
  点亮LED2                      GPIOA->ODR &=~(1<<3); 
  关闭LED1                      GPIOA->ODR |=(1<<2); 
  关闭LED2                      GPIOA->ODR |=(1<<3); 

库函数版


库函数程序设计经验总结：
1.对外设进行驱动开发，使用库函数时，库函数、寄存器的名称往往都以 外设名称+下划线 开头。
比如函数： CAN_ITConfig(),ADC_DeInit()
比如寄存器：CAN_Prescaler,TIM6_CR

2.常用的寄存器名称
 ·控制寄存器xxx_CR:用来配置、控制响应外设的工作方式，如GPIOx_CRL,AFIO_EXTICR1~AFIO_EXTICR4.
 ·数据寄存器xxx_DR:存储量外设进行输入输出的数据，如GPIOx_IDR,GPIOx_ODR,USART_DR等
 ·状态寄存器xxx_SR:实时的更新存储着外设的当前运行状态，主要是一些标志位，如USART_SR,ADC_SR等。
 
3.外设的初始化
    外设初始化函数，功能是使能外设、设置工作模式等，常见的比如USART_Init(),ADC_Init(),I2C_Init()等，后面都有Init字眼。
    调用初始化函数xxx_Init之前，要给它传递初始化参数，初始化的对象当然是外设寄存器的xxx_TypeDef类型的结构体。
    设置对象的参数值则保存在另外一个结构体变量中，结构体类型的命名通常是xxx_InitTypeDef,例如 GPIO_InitTypeDef GPIO_InitStructure.
    在给xxx_Init传递参数时，传递的是这个变量的指针。
    
4.外设的初始化步骤
    使用ST库对外设进行初始化，一般有以下步骤：
    1）定义一个xxx_InitTypeDef类型的初始化结构体
    2）根据使用要求，向这些初始化结构体的成员写入特定的控制参数
    3）填充完结构体后，把指向这个结构体的地址作为输入参数，调用相应的外设库函数xxx_Init（），从而实现向寄存器写入控制参数，配置好外设。

5.控制外设常见的操作
    发送数据、接受数据，常用在初始化完成以后，正式启用外设的功能，调用函数xxx_SendData等
    实时的监控状态需要实时的了解外设当前的工作状态，如果使用中断控制，那么外设的更新状态通常会引发中断，而在中断服务程序中根据状态实时的进行控制。
    读取状态的函数通常是xxx_GetFlagStatus()或者xxx_GetITStatus()
    
6.常见函数及其功能
  xxx_Init()              对外设进行初始化
  xxx_DeInit()            以默认的形式对外设进行初始化
  xxx_StuctInit()         以默认数据填充初始化结构体
  xxx_SendData()          使用外设发送数据
  xxx_ReceiveData()       获取外设接收到的数据
  xxx_GetFlagStatus()     检查外设事件标志位
  xxx_GetITStatus()       检查外设中断标志位
  xxx_ClearFlag()         清除事件标志位
  xxx_ClearITPendingBit() 清除中断标志位
  xxx_ITConfig()          设置外设的中断
  xxx_Cmd()               使能或关闭外设
  xxx_DMACmd()            配置外设是否可以使用DMA请求
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




















